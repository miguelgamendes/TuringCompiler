/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. TuringMachine.jj */
/*@egen*/options
{
  LOOKAHEAD = 1;
}

PARSER_BEGIN(TuringMachine)

import java.io.*;
import java.util.*;

// c\u00c3\u00b3digo Java que invoca o parser
public class TuringMachine/*@bgen(jjtree)*/implements TuringMachineTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTTuringMachineState jjtree = new JJTTuringMachineState();

/*@egen*/

  public static Hashtable ST = new Hashtable();

  public static int symbolID = 0;

  public static void main(String args[]) throws ParseException, FileNotFoundException, UnsupportedEncodingException, IOException {
    
    TuringMachine parser = new TuringMachine(new FileInputStream(args[0]));

    //generate AST
    //try {
      SimpleNode n = parser.file();
      n.dump("");
      System.out.println("DUMPED AST");
    /*} catch(Exception e) {
      System.out.println("FAILED DUMP");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }*/

    String temp;
    STC temp2;
    String temp3;
    STC temp4;

    //print symbol table values
    Enumeration t = ST.keys();

    while(t.hasMoreElements() == true) {  
      temp = (String)t.nextElement();
      temp2 = (STC)ST.get(temp);
      System.out.println(temp);
        if ( temp2.type != null )
          System.out.println(" type = " + temp2.type);
        if ( temp2.value != null )
          System.out.println(" value = " + temp2.value);
        if ( temp2.state != -1 )
          System.out.println(" state = " + temp2.state);
    }

    System.out.println("CREATED SYMBOL TABLE");

    //semantic rules
    //check for jump validity
    Enumeration u = ST.keys();

    while(u.hasMoreElements()) {
      temp = (String)u.nextElement();
      temp2 = (STC)ST.get(temp);

      Enumeration v = ST.keys();
      boolean validJump = false;

      if(temp2.type == "Jump") {
        while(v.hasMoreElements()) {
          temp3 = (String)v.nextElement();
          temp4 = (STC)ST.get(temp3);
  
          if(temp4.type == "State") {
            if(temp2.value.equals(temp4.value))
              validJump = true;
          }
        }

        if(!validJump) {
          System.out.println("Invalid jump. You didn't say anything about any state " + temp2.value + ", bro.");
        }
      }
    }

    //generate code
    CodeGenerator generator = new CodeGenerator(n);
    generator.generateCode();

  }
}

PARSER_END(TuringMachine)

JAVACODE
void error_skipto(int kind, String type) {/*@bgen(jjtree) error_skipto */
SimpleNode jjtn000 = new SimpleNode(JJTERROR_SKIPTO);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {
/*@egen*/
  ParseException e = generateParseException();
  System.out.println("OMG you wrote a " + type + " wrong!!! D:");
  Token t;
  do {
    t = getNextToken();
  } while(t.kind != kind);/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

JAVACODE
void tokenerror_skipto(int kind) {/*@bgen(jjtree) tokenerror_skipto */
SimpleNode jjtn000 = new SimpleNode(JJTTOKENERROR_SKIPTO);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {
/*@egen*/
  System.out.println("---ILLEGAL TOKEN---");
  Token t;
  do {
    t = getNextToken();
  } while(t.kind != kind);/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

// s\u00c3\u00admbolos que n\u00c3\u00a3o devem ser considerados na an\u00c3\u00a1lise
SKIP :
{
" " 
| "\n" 
| "\t" 
| "\r"
| "("
| ")"
| "["
| "]"
| < INVALIDINPUT : ~["0"-"9" , "a"-"z" , "A" - "Z" , "," , ";" , "{" , "}"] >
}

// defini\u00c3\u00a7\u00c3\u00a3o dos tokens (s\u00c3\u00admbolos terminais)
TOKEN :
{
< INTEGER : (["0" - "9"])+ >
|< DIRECTION : "right" | "left" > 
|< SYMBOL : (["a" - "z"] | ["A" - "Z"] | ["0" - "9"]) >
|< STATE_KEYWORD : "State" >
|< CARD_BEG_KEYWORD : "{" >
|< CARD_END_KEYWORD : "}" >
|< READ_KEYWORD : "read" >
|< WRITE_KEYWORD : "write" >
|< MOVE_KEYWORD : "move" >
|< JUMP_KEYWORD : "jump" >
|< END_KEYWORD : "end" >
|< SEMICOLON : ";" >
|< COMMA : "," >
|< NOTANUMBER : ~["0"-"9"]>
}

// defini\u00c3\u00a7\u00c3\u00a3o da produ\u00c3\u00a7\u00c3\u00a3o
void read(int currentState)       : 
{/*@bgen(jjtree) READ */
  SimpleNode jjtn000 = new SimpleNode(JJTREAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) READ */
  try {
/*@egen*/
  {System.out.println("READ");}
  try {
    (<READ_KEYWORD>
    t = <SYMBOL> {jjtn000.value = t.image;}
    <COMMA>)
    {ST.put(new Integer(symbolID++).toString(), new STC("Read", t.image, currentState));}
  } catch(ParseException e) {
    error_skipto(COMMA, "read statement");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void write(int currentState)        :
{/*@bgen(jjtree) WRITE */
  SimpleNode jjtn000 = new SimpleNode(JJTWRITE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) WRITE */
  try {
/*@egen*/
  {System.out.println("WRITE");}
  try {
    (<WRITE_KEYWORD>
    t = <SYMBOL> {jjtn000.value = t.image;}
    <COMMA>)
    {ST.put(new Integer(symbolID++).toString(), new STC("Write", t.image, currentState));}
  } catch(ParseException e) {
    error_skipto(COMMA, "write statement");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

int state()        :
{/*@bgen(jjtree) STATE */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) STATE */
  try {
/*@egen*/
  {System.out.println("STATE");}
  try {
    (<STATE_KEYWORD>
    t = <INTEGER> {jjtn000.value = t.image;}
    <CARD_BEG_KEYWORD>)
    {ST.put(new Integer(symbolID++).toString(), new STC("State", t.image, t.image));}

    //{System.out.println("STATE STATE STATE: " + Integer.parseInt(t.image));}
    {return Integer.parseInt(t.image);}
  } catch(TokenMgrError e) {
    tokenerror_skipto(CARD_BEG_KEYWORD);
  } catch(ParseException e) {
    error_skipto(CARD_BEG_KEYWORD, "card header");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void nextstate(int currentState)       :
{/*@bgen(jjtree) JUMP */
  SimpleNode jjtn000 = new SimpleNode(JJTJUMP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) JUMP */
  try {
/*@egen*/
  {System.out.println("JUMP");}
  try {
    (<JUMP_KEYWORD>
    t = <INTEGER> {jjtn000.value = t.image;}
    <SEMICOLON>)
    {ST.put(new Integer(symbolID++).toString(), new STC("Jump", t.image, currentState));}
  } catch(ParseException e) {
    error_skipto(SEMICOLON, "jump statement");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void end()      :
{/*@bgen(jjtree) END */
  SimpleNode jjtn000 = new SimpleNode(JJTEND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) END */
  try {
/*@egen*/
  {System.out.println("END");}
  try {
    (<END_KEYWORD>
    <SEMICOLON>)
  } catch(ParseException e) {
    error_skipto(SEMICOLON, "end statement");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void direction()       :
{/*@bgen(jjtree) MOVE */
  SimpleNode jjtn000 = new SimpleNode(JJTMOVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) MOVE */
  try {
/*@egen*/
  {System.out.println("MOVE");}
  try {
    (<MOVE_KEYWORD>
    t = <DIRECTION> {jjtn000.value = t.image;}
    <COMMA>)
  } catch(ParseException e) {
    error_skipto(COMMA, "move statement");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void line(int currentState)       :
{/*@bgen(jjtree) LINE */
  SimpleNode jjtn000 = new SimpleNode(JJTLINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) LINE */
  try {
/*@egen*/
  {System.out.println("LINE");
    /*System.out.println("LINE LINE LINE: " + currentState);*/}
  //try {
    read(currentState)
    write(currentState)
    direction()
    (nextstate(currentState) | end())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
  /*} catch (ParseException e) {
    {System.out.println("LINE ERROR");}
    error_skipto(SEMICOLON, "line");
  }*/
}

void endstate()       :
{
}
{
  {System.out.println("CARDEND");}
  <CARD_END_KEYWORD>
  //|
  //error_skipto(CARD_END_KEYWORD, "card ending")
}

void card()       :
{/*@bgen(jjtree) CARD */
  SimpleNode jjtn000 = new SimpleNode(JJTCARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int correctCard = 1;
  int wrongCard = 0;
  int correctCardCount = 0;
  int wrongCardCount = 0;
  int currentState = -1;
}
{/*@bgen(jjtree) CARD */
  try {
/*@egen*/
  {System.out.println("CARD");}
  //try {
    currentState = state()
    (line(currentState))*
    endstate()
    //endstate()
    [/*correctCardCount=*/card()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
  /*} catch(ParseException e) {
    error_skipto(CARD_END_KEYWORD, "card");
    return ++wrongCardCount;
  }
  { return wrongCardCount; }*/
}

SimpleNode file()                :
{/*@bgen(jjtree) TURINGMACHINE */
  SimpleNode jjtn000 = new SimpleNode(JJTTURINGMACHINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int correctCompile = 0;
  int wrongCompile = 0;
}
{/*@bgen(jjtree) TURINGMACHINE */
                     try {
/*@egen*/
  /*{System.out.println("\nErrors:");}

  correctCompile =*/ card()

  /*{if(wrongCompile == 0)System.out.println("NONE");}
  {System.out.println();}
  {
    if(wrongCompile != 0)
      System.out.println("Compilation complete.\n\nWrong cards: " + wrongCompile);
    else
      System.out.println("Compilation complete.\n\nAll cards correct.");
  }*/

  {System.out.println("EOF");}
  <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/

  {return jjtn000;}/*@bgen(jjtree)*/
                     } catch (Throwable jjte000) {
                       if (jjtc000) {
                         jjtree.clearNodeScope(jjtn000);
                         jjtc000 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte000 instanceof RuntimeException) {
                         throw (RuntimeException)jjte000;
                       }
                       if (jjte000 instanceof ParseException) {
                         throw (ParseException)jjte000;
                       }
                       throw (Error)jjte000;
                     } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
                     }
/*@egen*/
}