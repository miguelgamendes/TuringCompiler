/* TuringMachine.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. TuringMachine.java */
import java.io.*;
import java.util.*;

// código Java que invoca o parser
public class TuringMachine/*@bgen(jjtree)*/implements TuringMachineTreeConstants, TuringMachineConstants {/*@bgen(jjtree)*/
  protected static JJTTuringMachineState jjtree = new JJTTuringMachineState();
  public static Hashtable ST = new Hashtable();

  public static int symbolID = 0;

  public static void main(String args[]) throws ParseException, FileNotFoundException, UnsupportedEncodingException, IOException {

    TuringMachine parser = new TuringMachine(new FileInputStream(args[0]));

    //generate AST
    //try {
      SimpleNode n = parser.file();
      n.dump("");
      System.out.println("DUMPED AST");
    /*} catch(Exception e) {
      System.out.println("FAILED DUMP");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }*/

    String temp;
    STC temp2;
    String temp3;
    STC temp4;

    //print symbol table values
    Enumeration t = ST.keys();

    while(t.hasMoreElements() == true) {
      temp = (String)t.nextElement();
      temp2 = (STC)ST.get(temp);
      System.out.println(temp);
        if ( temp2.type != null )
          System.out.println(" type = " + temp2.type);
        if ( temp2.value != null )
          System.out.println(" value = " + temp2.value);
        if ( temp2.state != -1 )
          System.out.println(" state = " + temp2.state);
    }

    System.out.println("CREATED SYMBOL TABLE");

    //semantic rules
    //check for jump validity
    Enumeration u = ST.keys();

    while(u.hasMoreElements()) {
      temp = (String)u.nextElement();
      temp2 = (STC)ST.get(temp);

      Enumeration v = ST.keys();
      boolean validJump = false;

      if(temp2.type == "Jump") {
        while(v.hasMoreElements()) {
          temp3 = (String)v.nextElement();
          temp4 = (STC)ST.get(temp3);

          if(temp4.type == "State") {
            if(temp2.value.equals(temp4.value))
              validJump = true;
          }
        }

        if(!validJump) {
          System.out.println("Invalid jump. You didn't say anything about any state " + temp2.value + ", bro.");
        }
      }
    }

    //generate code
    CodeGenerator generator = new CodeGenerator(n);
    generator.generateCode();

  }

  static void error_skipto(int kind, String type) throws ParseException {/*@bgen(jjtree) error_skipto */
SimpleNode jjtn000 = new SimpleNode(JJTERROR_SKIPTO);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {ParseException e = generateParseException();
  System.out.println("OMG you wrote a " + type + " wrong!!! D:");
  Token t;
  do {
    t = getNextToken();
  } while(t.kind != kind);/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
  }

  static void tokenerror_skipto(int kind) throws ParseException {/*@bgen(jjtree) tokenerror_skipto */
SimpleNode jjtn000 = new SimpleNode(JJTTOKENERROR_SKIPTO);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {System.out.println("---ILLEGAL TOKEN---");
  Token t;
  do {
    t = getNextToken();
  } while(t.kind != kind);/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
  }

// definição da produção
  static final public void read(int currentState) throws ParseException {/*@bgen(jjtree) READ */
  SimpleNode jjtn000 = new SimpleNode(JJTREAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
System.out.println("READ");
      try {
        jj_consume_token(READ_KEYWORD);
        t = jj_consume_token(SYMBOL);
jjtn000.value = t.image;
        jj_consume_token(COMMA);
ST.put(new Integer(symbolID++).toString(), new STC("Read", t.image, currentState));
      } catch (ParseException e) {
error_skipto(COMMA, "read statement");
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void write(int currentState) throws ParseException {/*@bgen(jjtree) WRITE */
  SimpleNode jjtn000 = new SimpleNode(JJTWRITE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
System.out.println("WRITE");
      try {
        jj_consume_token(WRITE_KEYWORD);
        t = jj_consume_token(SYMBOL);
jjtn000.value = t.image;
        jj_consume_token(COMMA);
ST.put(new Integer(symbolID++).toString(), new STC("Write", t.image, currentState));
      } catch (ParseException e) {
error_skipto(COMMA, "write statement");
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public int state() throws ParseException {/*@bgen(jjtree) STATE */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
System.out.println("STATE");
      try {
        jj_consume_token(STATE_KEYWORD);
        t = jj_consume_token(INTEGER);
jjtn000.value = t.image;
        jj_consume_token(CARD_BEG_KEYWORD);
ST.put(new Integer(symbolID++).toString(), new STC("State", t.image, t.image));
{if ("" != null) return Integer.parseInt(t.image);}
      } catch (TokenMgrError e) {
tokenerror_skipto(CARD_BEG_KEYWORD);
      } catch (ParseException e) {
error_skipto(CARD_BEG_KEYWORD, "card header");
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void nextstate(int currentState) throws ParseException {/*@bgen(jjtree) JUMP */
  SimpleNode jjtn000 = new SimpleNode(JJTJUMP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
System.out.println("JUMP");
      try {
        jj_consume_token(JUMP_KEYWORD);
        t = jj_consume_token(INTEGER);
jjtn000.value = t.image;
        jj_consume_token(SEMICOLON);
ST.put(new Integer(symbolID++).toString(), new STC("Jump", t.image, currentState));
      } catch (ParseException e) {
error_skipto(SEMICOLON, "jump statement");
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void end() throws ParseException {/*@bgen(jjtree) END */
  SimpleNode jjtn000 = new SimpleNode(JJTEND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
System.out.println("END");
      try {
        jj_consume_token(END_KEYWORD);
        jj_consume_token(SEMICOLON);
      } catch (ParseException e) {
error_skipto(SEMICOLON, "end statement");
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void direction() throws ParseException {/*@bgen(jjtree) MOVE */
  SimpleNode jjtn000 = new SimpleNode(JJTMOVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
System.out.println("MOVE");
      try {
        jj_consume_token(MOVE_KEYWORD);
        t = jj_consume_token(DIRECTION);
jjtn000.value = t.image;
        jj_consume_token(COMMA);
      } catch (ParseException e) {
error_skipto(COMMA, "move statement");
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void line(int currentState) throws ParseException {/*@bgen(jjtree) LINE */
  SimpleNode jjtn000 = new SimpleNode(JJTLINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
System.out.println("LINE");
    /*System.out.println("LINE LINE LINE: " + currentState);*/
      read(currentState);
      write(currentState);
      direction();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case JUMP_KEYWORD:{
        nextstate(currentState);
        break;
        }
      case END_KEYWORD:{
        end();
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void endstate() throws ParseException {
System.out.println("CARDEND");
    jj_consume_token(CARD_END_KEYWORD);
  }

  static final public void card() throws ParseException {/*@bgen(jjtree) CARD */
  SimpleNode jjtn000 = new SimpleNode(JJTCARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int correctCard = 1;
  int wrongCard = 0;
  int correctCardCount = 0;
  int wrongCardCount = 0;
  int currentState = -1;
    try {
System.out.println("CARD");
      //try {
          currentState = state();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case READ_KEYWORD:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        line(currentState);
      }
      endstate();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STATE_KEYWORD:{
        card();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public SimpleNode file() throws ParseException {/*@bgen(jjtree) TURINGMACHINE */
  SimpleNode jjtn000 = new SimpleNode(JJTTURINGMACHINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int correctCompile = 0;
  int wrongCompile = 0;
    try {
      card();
System.out.println("EOF");
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
                         jjtree.clearNodeScope(jjtn000);
                         jjtc000 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte000 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte000;}
                       }
                       if (jjte000 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte000;}
                       }
                       {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public TuringMachineTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x180000,0x10000,0x2000,};
   }

  /** Constructor with InputStream. */
  public TuringMachine(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TuringMachine(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TuringMachineTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public TuringMachine(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TuringMachineTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public TuringMachine(TuringMachineTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(TuringMachineTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[24];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 24; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
