options
{
	LOOKAHEAD = 1;
}

PARSER_BEGIN(TuringMachine)
import java.io.*;
// código Java que invoca o parser
public class TuringMachine {
	public static void main(String args[]) throws ParseException, FileNotFoundException {
		TuringMachine parser = new TuringMachine(new FileInputStream(args[0]));
		parser.file();
	}
}
PARSER_END(TuringMachine)
// símbolos que não devem ser considerados na análise
SKIP :
{
"\t" | "\r"
}
// definição dos tokens (símbolos terminais)
TOKEN :
{
< WHITESPACE : (" " | "\n")+ >
|< INTEGER : (["0" - "9"])+ >
|< EOL : "\n" >
|< DIRECTION : "right" | "left" > 
|< SYMBOL : (["a" - "z"] | ["A" - "Z"] | ["0" - "9"]) >
//|< DIVIDER : ":" >
|< STATE_KEYWORD : "State" >
|< CARD_BEG_KEYWORD : "{" >
|< CARD_END_KEYWORD : "}" >
|< READ_KEYWORD : "read" >
|< WRITE_KEYWORD : "write" >
|< MOVE_KEYWORD : "move" >
|< JUMP_KEYWORD : "jump" >
}
// definição da produção
void read() : {}
{
  <READ_KEYWORD><WHITESPACE><SYMBOL><WHITESPACE>
}

void write() :
{
}
{
  <WRITE_KEYWORD><WHITESPACE><SYMBOL><WHITESPACE>
}

void state() :
{
}
{
  <STATE_KEYWORD><WHITESPACE><INTEGER><WHITESPACE><CARD_BEG_KEYWORD><WHITESPACE>
}

void nextstate() :
{
}
{
  <JUMP_KEYWORD><INTEGER><WHITESPACE><CARD_END_KEYWORD>
}


void direction() :
{
}
{
  <MOVE_KEYWORD><WHITESPACE><DIRECTION><WHITESPACE>
}

void card() :
{
}
{
  state() read() write() direction() nextstate() [<EOL>]
}

void file() :
{
}
{
  (card())*<EOF>
}