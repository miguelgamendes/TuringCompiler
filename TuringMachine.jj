options
{
	LOOKAHEAD = 1;
}

PARSER_BEGIN(TuringMachine)
import java.io.*;
// código Java que invoca o parser
public class TuringMachine {
	public static void main(String args[]) throws ParseException, FileNotFoundException {
		TuringMachine parser = new TuringMachine(new FileInputStream(args[0]));
		parser.file();
	}
}
PARSER_END(TuringMachine)
// símbolos que não devem ser considerados na análise
SKIP :
{
" " | "\t" | "\r"
}
// definição dos tokens (símbolos terminais)
TOKEN :
{
< INTEGER : (["0" - "9"])+ >
| < LF : "\n" >
|< DIRECTION : "R" | "L" > 
|< SYMBOL : (["a" - "z"] | ["A" - "Z"] | ["0" - "9"]) >
|< DIVIDER : ":" >
}
// definição da produção
void read() : {}
{
  <SYMBOL><DIVIDER>
}

void write() :
{
}
{
  <SYMBOL><DIVIDER>
}

void state() :
{
}
{
  <INTEGER><DIVIDER>
}

void nextstate() :
{
}
{
  <INTEGER><DIVIDER>
}


void direction() :
{
}
{
  <DIRECTION>
}

void line() :
{
}
{
  state() read() nextstate() write() direction() [<LF>]
}

void file() :
{
}
{
  (line())*<EOF>
}