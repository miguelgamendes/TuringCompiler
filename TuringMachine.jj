options
{
	LOOKAHEAD = 1;
}

PARSER_BEGIN(TuringMachine)
import java.io.*;
// código Java que invoca o parser
public class TuringMachine {
	public static void main(String args[]) throws ParseException, FileNotFoundException {
		TuringMachine parser = new TuringMachine(new FileInputStream(args[0]));
		parser.file();
	}
}
PARSER_END(TuringMachine)

JAVACODE
void error_skipto(int kind, String type) {
  //ParseException e = generateParseException();
  System.out.println("OMG you wrote a " + type + " wrong!!! D:");
  Token t;
  do {
    t = getNextToken();
  } while(t.kind != kind);
}

// símbolos que não devem ser considerados na análise
SKIP :
{
" " | "\n" | "\t" | "\r"
}
// definição dos tokens (símbolos terminais)
TOKEN :
{
< INTEGER : (["0" - "9"])+ >
|< DIRECTION : "right" | "left" > 
|< SYMBOL : (["a" - "z"] | ["A" - "Z"] | ["0" - "9"]) >
|< STATE_KEYWORD : "State" >
|< CARD_BEG_KEYWORD : "{" >
|< CARD_END_KEYWORD : "}" >
|< READ_KEYWORD : "read" >
|< WRITE_KEYWORD : "write" >
|< MOVE_KEYWORD : "move" >
|< JUMP_KEYWORD : "jump" >
|< SEMICOLON : ";" >
|< COMMA : "," >
}

// definição da produção
void read() : {}
{
  (<READ_KEYWORD>
  <SYMBOL>)
  |
  error_skipto(COMMA, "read statement")
}

void write() :
{
}
{
  (<WRITE_KEYWORD>
  <SYMBOL>)
  |
  error_skipto(COMMA, "write statement")
}

void state() :
{
}
{
  (<STATE_KEYWORD>
  <INTEGER>
  <CARD_BEG_KEYWORD>)
  |
  error_skipto(CARD_BEG_KEYWORD, "card header")
}

void nextstate() :
{
}
{
  (<JUMP_KEYWORD>
  <INTEGER>)
  |
  error_skipto(SEMICOLON, "jump statement")
}


void direction() :
{
}
{
  (<MOVE_KEYWORD>
  <DIRECTION>)
  |
  error_skipto(COMMA, "move statement")
}

void line() :
{
}
{
  {System.out.println("LINE");}
  try {
    (read() <COMMA>
    write() <COMMA>
    direction() <COMMA>
    nextstate() <SEMICOLON>)*
  } catch (ParseException e) {
    {System.out.println("LINE ERROR");}
    //error_skipto(SEMICOLON, "line");
  }
}

void endstate() :
{
}
{
  <CARD_END_KEYWORD>
  |
  error_skipto(CARD_END_KEYWORD, "card ending")
}

int card() :
{
  int correctCard = 1;
  int wrongCard = 0;
  int correctCardCount = 0;
  int wrongCardCount = 0;
}
{
  try {
    state()
    line()
    endstate()
    [correctCardCount=card()]
  } catch(ParseException e) {
    error_skipto(CARD_END_KEYWORD, "card");
    return ++wrongCardCount;
  }
  { return wrongCardCount; }
}

void file() :
{
  int correctCompile = 0;
  int wrongCompile = 0;
}
{
  {System.out.println("\nErrors:");}

  correctCompile = card()

  {if(wrongCompile == 0)System.out.println("NONE");}
  {System.out.println();}
  {
    if(wrongCompile != 0)
      System.out.println("Compilation complete.\n\nWrong cards: " + wrongCompile);
    else
      System.out.println("Compilation complete.\n\nAll cards correct.");
  }
  |
  <EOF>
}